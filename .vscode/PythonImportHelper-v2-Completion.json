[
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "chess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "chess",
        "description": "chess",
        "detail": "chess",
        "documentation": {}
    },
    {
        "label": "Move",
        "importPath": "chess",
        "description": "chess",
        "isExtraImport": true,
        "detail": "chess",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Piece",
        "importPath": "GUI.piece",
        "description": "GUI.piece",
        "isExtraImport": true,
        "detail": "GUI.piece",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "score",
        "importPath": "heuristic",
        "description": "heuristic",
        "isExtraImport": true,
        "detail": "heuristic",
        "documentation": {}
    },
    {
        "label": "MOVES",
        "importPath": "data.opening_book",
        "description": "data.opening_book",
        "isExtraImport": true,
        "detail": "data.opening_book",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "board",
        "importPath": "GUI.Board",
        "description": "GUI.Board",
        "isExtraImport": true,
        "detail": "GUI.Board",
        "documentation": {}
    },
    {
        "label": "get_best_move",
        "importPath": "chessMain",
        "description": "chessMain",
        "isExtraImport": true,
        "detail": "chessMain",
        "documentation": {}
    },
    {
        "label": "start_screen",
        "importPath": "start_window",
        "description": "start_window",
        "isExtraImport": true,
        "detail": "start_window",
        "documentation": {}
    },
    {
        "label": "WHITE_MOVES",
        "kind": 5,
        "importPath": "data.opening_book",
        "description": "data.opening_book",
        "peekOfCode": "WHITE_MOVES = {\n    'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1': ('e2e3', 'c2c4', 'a2a4', 'f2f3', 'b1a3', 'b2b3', 'g2g4', 'h2h3', 'b2b4', 'e2e4', 'h2h4', 'a2a3', 'g1f3', 'f2f4', 'd2d4', 'g2g3', 'g1h3', 'c2c3', 'b1c3', 'd2d3'),\n    'rnbqkbnr/pppp1ppp/8/4p3/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 2': ('d1h5', 'f1c4', 'g1e2', 'g1f3', 'd2d4', 'e1e2', 'f2f4', 'b1c3'),\n    'r1bqkbnr/pppp1ppp/2n5/4p3/4P3/5N2/PPPP1PPP/RNBQKB1R w KQkq - 2 3': ('f1c4', 'f1b5', 'd2d4', 'c2c3', 'g2g3', 'b1c3', 'd2d3'),\n    'r1bqkb1r/pppp1ppp/2n2n2/1B2p3/4P3/5N2/PPPP1PPP/RNBQK2R w KQkq - 4 4': ('e1g1', 'd1e2', 'd2d4', 'b5c6', 'b1c3', 'd2d3'),\n    'r1bqk2r/pppp1ppp/2n2n2/1Bb1p3/4P3/3P1N2/PPP2PPP/RNBQK2R w KQkq - 1 5': ('e1g1', 'c1g5', 'b1d2', 'c2c3', 'c1e3', 'b5c6', 'b5a4', 'b1c3'),\n    'r1bqk2r/ppp2ppp/2p2n2/2b1p3/4P3/3P1N2/PPP2PPP/RNBQK2R w KQkq - 0 6': ('e1g1', 'b1d2', 'h2h3', 'd1e2', 'c2c3', 'c1e3', 'b1c3'),\n    'r1bqk2r/pppn1ppp/2p5/2b1p3/4P3/3P1N2/PPP2PPP/RNBQ1RK1 w kq - 2 7': ('c2c3', 'b1d2', 'h2h3'),\n    'r1bq1rk1/pppn1ppp/2p5/2b1p3/4P3/3P1N2/PPPN1PPP/R1BQ1RK1 w - - 4 8': ('d1e1', 'd2c4'),\n    'r1bq1rk1/pppn2pp/2p2p2/2b1p3/4P3/3P1N2/PPPN1PPP/R1B1QRK1 w - - 0 9': ('d2c4',),",
        "detail": "data.opening_book",
        "documentation": {}
    },
    {
        "label": "BLACK_MOVES",
        "kind": 5,
        "importPath": "data.opening_book",
        "description": "data.opening_book",
        "peekOfCode": "BLACK_MOVES = {\n    'rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq - 0 1': ('e7e5', 'c7c5', 'g7g6', 'd7d5', 'e7e6', 'a7a6', 'b7b6', 'g7g5', 'h7h6', 'a7a5', 'c7c6', 'd7d6', 'b8c6', 'g8f6'),\n    'rnbqkbnr/pppp1ppp/8/4p3/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 1 2': ('d7d6', 'b8c6', 'g8f6', 'f8c5'),\n    'r1bqkbnr/pppp1ppp/2n5/1B2p3/4P3/5N2/PPPP1PPP/RNBQK2R b KQkq - 3 3': ('g7g6', 'a7a6', 'f8d6', 'f8c5', 'g8e7', 'c6b4', 'c6d4', 'd7d6', 'f8b4', 'g8f6', 'f7f5'),\n    'r1bqkb1r/pppp1ppp/2n2n2/1B2p3/4P3/3P1N2/PPP2PPP/RNBQK2R b KQkq - 0 4': ('f8d6', 'd7d6', 'f8c5', 'c6e7'),\n    'r1bqk2r/pppp1ppp/2B2n2/2b1p3/4P3/3P1N2/PPP2PPP/RNBQK2R b KQkq - 0 5': ('d7c6',),\n    'r1bqk2r/ppp2ppp/2p2n2/2b1p3/4P3/3P1N2/PPP2PPP/RNBQ1RK1 b kq - 1 6': ('d8e7', 'f6d7', 'c8g4', 'd8d6', 'c5d6'),\n    'r1bqk2r/pppn1ppp/2p5/2b1p3/4P3/3P1N2/PPPN1PPP/R1BQ1RK1 b kq - 3 7': ('e8g8',),\n    'r1bq1rk1/pppn1ppp/2p5/2b1p3/4P3/3P1N2/PPPN1PPP/R1B1QRK1 b - - 5 8': ('f7f6',),\n    'r1bq1rk1/pppn2pp/2p2p2/2b1p3/2N1P3/3P1N2/PPP2PPP/R1B1QRK1 b - - 1 9': ('f8f7',),",
        "detail": "data.opening_book",
        "documentation": {}
    },
    {
        "label": "MOVES",
        "kind": 5,
        "importPath": "data.opening_book",
        "description": "data.opening_book",
        "peekOfCode": "MOVES = {\n    True: WHITE_MOVES,\n    False: BLACK_MOVES,\n}",
        "detail": "data.opening_book",
        "documentation": {}
    },
    {
        "label": "board",
        "kind": 6,
        "importPath": "GUI.Board",
        "description": "GUI.Board",
        "peekOfCode": "class board:\n    def __init__(self, width, height, player):\n        self.width = width\n        self.height = height\n        self.square_height = height // 8\n        self.square_width = width // 8\n        self.selected_piece = None\n        self.promotion = None\n        self.list_valid_moves = []\n        self.board = chess.Board() ",
        "detail": "GUI.Board",
        "documentation": {}
    },
    {
        "label": "unicode_to_algebraic",
        "kind": 5,
        "importPath": "GUI.Board",
        "description": "GUI.Board",
        "peekOfCode": "unicode_to_algebraic = {\n    '♚': 'K', '♛': 'Q', '♜': 'R', '♝': 'B', '♞': 'N', '♟': 'P',\n    '♔': 'k', '♕': 'q', '♖': 'r', '♗': 'b', '♘': 'n', '♙': 'p'\n}\npromotion_code = ['q', 'r', 'b', 'n']\npromotion_list = ['queen', 'rook', 'bishop', 'knight']\nclass board:\n    def __init__(self, width, height, player):\n        self.width = width\n        self.height = height",
        "detail": "GUI.Board",
        "documentation": {}
    },
    {
        "label": "promotion_code",
        "kind": 5,
        "importPath": "GUI.Board",
        "description": "GUI.Board",
        "peekOfCode": "promotion_code = ['q', 'r', 'b', 'n']\npromotion_list = ['queen', 'rook', 'bishop', 'knight']\nclass board:\n    def __init__(self, width, height, player):\n        self.width = width\n        self.height = height\n        self.square_height = height // 8\n        self.square_width = width // 8\n        self.selected_piece = None\n        self.promotion = None",
        "detail": "GUI.Board",
        "documentation": {}
    },
    {
        "label": "promotion_list",
        "kind": 5,
        "importPath": "GUI.Board",
        "description": "GUI.Board",
        "peekOfCode": "promotion_list = ['queen', 'rook', 'bishop', 'knight']\nclass board:\n    def __init__(self, width, height, player):\n        self.width = width\n        self.height = height\n        self.square_height = height // 8\n        self.square_width = width // 8\n        self.selected_piece = None\n        self.promotion = None\n        self.list_valid_moves = []",
        "detail": "GUI.Board",
        "documentation": {}
    },
    {
        "label": "Piece",
        "kind": 6,
        "importPath": "GUI.piece",
        "description": "GUI.piece",
        "peekOfCode": "class Piece(pygame.sprite.Sprite):\n    def __init__(self, piece_code, team_code, square_width, square_height):\n        super().__init__()\n        self.piece_code = piece_code\n        self.team_code = team_code\n        self.image = self.load_image(piece_code, team_code, square_width, square_height)\n        self.rect = self.image.get_rect()\n    def load_image(self, piece_code, team_code, square_width, square_height):\n        piece_str = self.get_piece_string(piece_code)\n        img_path = f'./data/imgs/{team_code}-{piece_str}.png'",
        "detail": "GUI.piece",
        "documentation": {}
    },
    {
        "label": "minimax",
        "kind": 2,
        "importPath": "chessMain",
        "description": "chessMain",
        "peekOfCode": "def minimax(board : chess.Board, depth, alpha, beta, turn = 1):\n    if depth == 0 or board.is_game_over():\n        return None, -turn * score(board)\n        # return None, quiesecence(board, 3, alpha, beta, turn)\n    legal_moves = board.legal_moves\n    if turn == 1:\n        max_eval = float('-inf')\n        best_move = None\n        for move in legal_moves:\n            board.push(move)",
        "detail": "chessMain",
        "documentation": {}
    },
    {
        "label": "get_best_move",
        "kind": 2,
        "importPath": "chessMain",
        "description": "chessMain",
        "peekOfCode": "def get_best_move(board: chess.Board, depth):\n    if (board.fullmove_number <= 10):\n        board_fen = board.fen()\n        if board_fen in MOVES[board.turn]:\n            move = random.choice(MOVES[board.turn][board_fen])\n            return Move.from_uci(move), 0\n    DEPTH = 4\n    return minimax(board, DEPTH, -float('inf'), float('inf'))\nif __name__ == \"__main__\":\n    # Puzzle 1: 2-move checkmate (Rook Sac)",
        "detail": "chessMain",
        "documentation": {}
    },
    {
        "label": "score",
        "kind": 2,
        "importPath": "heuristic",
        "description": "heuristic",
        "peekOfCode": "def score(board: chess.Board):\n    if board.is_game_over():\n        if board.is_checkmate(): return END_GAME_SCORE + END_GAME_SCORE / (board.fullmove_number + 1)\n        else: return 0\n    return calculate_score(board) \ndef calculate_score(board: chess.Board):\n    mg_score, eg_score = 0, 0\n    for square, piece in board.piece_map().items():\n        if piece.color == chess.WHITE:\n            mg_score += MG_PESTO[piece.piece_type][square ^ 56] + MG_PIECE_VALUES[piece.piece_type]",
        "detail": "heuristic",
        "documentation": {}
    },
    {
        "label": "calculate_score",
        "kind": 2,
        "importPath": "heuristic",
        "description": "heuristic",
        "peekOfCode": "def calculate_score(board: chess.Board):\n    mg_score, eg_score = 0, 0\n    for square, piece in board.piece_map().items():\n        if piece.color == chess.WHITE:\n            mg_score += MG_PESTO[piece.piece_type][square ^ 56] + MG_PIECE_VALUES[piece.piece_type]\n            eg_score += EG_PESTO[piece.piece_type][square ^ 56] + EG_PIECE_VALUES[piece.piece_type]\n        else:\n            mg_score -= MG_PESTO[piece.piece_type][square] + MG_PIECE_VALUES[piece.piece_type]\n            eg_score -= EG_PESTO[piece.piece_type][square] + EG_PIECE_VALUES[piece.piece_type]\n    phase = get_phase(board)",
        "detail": "heuristic",
        "documentation": {}
    },
    {
        "label": "get_phase",
        "kind": 2,
        "importPath": "heuristic",
        "description": "heuristic",
        "peekOfCode": "def get_phase(board: chess.Board):\n    phase = TOTAL_PHASE - sum(PHASE_VALUES.get(piece.piece_type, 0) for piece in board.piece_map().values())\n    phase = (phase * 256 + (TOTAL_PHASE / 2)) / TOTAL_PHASE\n    return phase",
        "detail": "heuristic",
        "documentation": {}
    },
    {
        "label": "MG_PIECE_VALUES",
        "kind": 5,
        "importPath": "heuristic",
        "description": "heuristic",
        "peekOfCode": "MG_PIECE_VALUES = {\n    chess.PAWN: 82,\n    chess.KNIGHT: 337,\n    chess.BISHOP: 365,\n    chess.ROOK: 477,\n    chess.QUEEN: 1025,\n    chess.KING: 24000,\n}\nEG_PIECE_VALUES = {\n    chess.PAWN: 94,",
        "detail": "heuristic",
        "documentation": {}
    },
    {
        "label": "EG_PIECE_VALUES",
        "kind": 5,
        "importPath": "heuristic",
        "description": "heuristic",
        "peekOfCode": "EG_PIECE_VALUES = {\n    chess.PAWN: 94,\n    chess.KNIGHT: 281,\n    chess.BISHOP: 297,\n    chess.ROOK: 512,\n    chess.QUEEN: 936,\n    chess.KING: 24000,\n}\nEND_GAME_SCORE = 1000000000\nPAWN_MG = (0,   0,   0,   0,   0,   0,  0,   0,",
        "detail": "heuristic",
        "documentation": {}
    },
    {
        "label": "END_GAME_SCORE",
        "kind": 5,
        "importPath": "heuristic",
        "description": "heuristic",
        "peekOfCode": "END_GAME_SCORE = 1000000000\nPAWN_MG = (0,   0,   0,   0,   0,   0,  0,   0,\n          98, 134,  61,  95,  68, 126, 34, -11,\n          -6,   7,  26,  31,  65,  56, 25, -20,\n         -14,  13,   6,  21,  23,  12, 17, -23,\n         -27,  -2,  -5,  12,  17,   6, 10, -25,\n         -26,  -4,  -4, -10,   3,   3, 33, -12,\n         -35,  -1, -20, -23, -15,  24, 38, -22,\n           0,   0,   0,   0,   0,   0,  0,   0,)\nPAWN_EG = (0,   0,   0,   0,   0,   0,   0,   0,",
        "detail": "heuristic",
        "documentation": {}
    },
    {
        "label": "PAWN_MG",
        "kind": 5,
        "importPath": "heuristic",
        "description": "heuristic",
        "peekOfCode": "PAWN_MG = (0,   0,   0,   0,   0,   0,  0,   0,\n          98, 134,  61,  95,  68, 126, 34, -11,\n          -6,   7,  26,  31,  65,  56, 25, -20,\n         -14,  13,   6,  21,  23,  12, 17, -23,\n         -27,  -2,  -5,  12,  17,   6, 10, -25,\n         -26,  -4,  -4, -10,   3,   3, 33, -12,\n         -35,  -1, -20, -23, -15,  24, 38, -22,\n           0,   0,   0,   0,   0,   0,  0,   0,)\nPAWN_EG = (0,   0,   0,   0,   0,   0,   0,   0,\n         178, 173, 158, 134, 147, 132, 165, 187,",
        "detail": "heuristic",
        "documentation": {}
    },
    {
        "label": "PAWN_EG",
        "kind": 5,
        "importPath": "heuristic",
        "description": "heuristic",
        "peekOfCode": "PAWN_EG = (0,   0,   0,   0,   0,   0,   0,   0,\n         178, 173, 158, 134, 147, 132, 165, 187,\n          94, 100,  85,  67,  56,  53,  82,  84,\n          32,  24,  13,   5,  -2,   4,  17,  17,\n          13,   9,  -3,  -7,  -7,  -8,   3,  -1,\n           4,   7,  -6,   1,   0,  -5,  -1,  -8,\n          13,   8,   8,  10,  13,   0,   2,  -7,\n           0,   0,   0,   0,   0,   0,   0,   0,)\nKNIGHT_MG = (-167, -89, -34, -49,  61, -97, -15, -107,\n              -73, -41,  72,  36,  23,  62,   7,  -17,",
        "detail": "heuristic",
        "documentation": {}
    },
    {
        "label": "KNIGHT_MG",
        "kind": 5,
        "importPath": "heuristic",
        "description": "heuristic",
        "peekOfCode": "KNIGHT_MG = (-167, -89, -34, -49,  61, -97, -15, -107,\n              -73, -41,  72,  36,  23,  62,   7,  -17,\n              -47,  60,  37,  65,  84, 129,  73,   44,\n               -9,  17,  19,  53,  37,  69,  18,   22,\n              -13,   4,  16,  13,  28,  19,  21,   -8,\n              -23,  -9,  12,  10,  19,  17,  25,  -16,\n              -29, -53, -12,  -3,  -1,  18, -14,  -19,\n             -105, -21, -58, -33, -17, -28, -19,  -23,)\nKNIGHT_EG = (-58, -38, -13, -28, -31, -27, -63, -99,\n             -25,  -8, -25,  -2,  -9, -25, -24, -52,",
        "detail": "heuristic",
        "documentation": {}
    },
    {
        "label": "KNIGHT_EG",
        "kind": 5,
        "importPath": "heuristic",
        "description": "heuristic",
        "peekOfCode": "KNIGHT_EG = (-58, -38, -13, -28, -31, -27, -63, -99,\n             -25,  -8, -25,  -2,  -9, -25, -24, -52,\n             -24, -20,  10,   9,  -1,  -9, -19, -41,\n             -17,   3,  22,  22,  22,  11,   8, -18,\n             -18,  -6,  16,  25,  16,  17,   4, -18,\n             -23,  -3,  -1,  15,  10,  -3, -20, -22,\n             -42, -20, -10,  -5,  -2, -20, -23, -44,\n             -29, -51, -23, -15, -22, -18, -50, -64,)\nBISHOP_MG = (-29,   4, -82, -37, -25, -42,   7,  -8,\n             -26,  16, -18, -13,  30,  59,  18, -47,",
        "detail": "heuristic",
        "documentation": {}
    },
    {
        "label": "BISHOP_MG",
        "kind": 5,
        "importPath": "heuristic",
        "description": "heuristic",
        "peekOfCode": "BISHOP_MG = (-29,   4, -82, -37, -25, -42,   7,  -8,\n             -26,  16, -18, -13,  30,  59,  18, -47,\n             -16,  37,  43,  40,  35,  50,  37,  -2,\n              -4,   5,  19,  50,  37,  37,   7,  -2,\n              -6,  13,  13,  26,  34,  12,  10,   4,\n               0,  15,  15,  15,  14,  27,  18,  10,\n               4,  15,  16,   0,   7,  21,  33,   1,\n             -33,  -3, -14, -21, -13, -12, -39, -21,)\nBISHOP_EG = (-14, -21, -11,  -8, -7,  -9, -17, -24,\n              -8,  -4,   7, -12, -3, -13,  -4, -14,",
        "detail": "heuristic",
        "documentation": {}
    },
    {
        "label": "BISHOP_EG",
        "kind": 5,
        "importPath": "heuristic",
        "description": "heuristic",
        "peekOfCode": "BISHOP_EG = (-14, -21, -11,  -8, -7,  -9, -17, -24,\n              -8,  -4,   7, -12, -3, -13,  -4, -14,\n               2,  -8,   0,  -1, -2,   6,   0,   4,\n              -3,   9,  12,   9, 14,  10,   3,   2,\n              -6,   3,  13,  19,  7,  10,  -3,  -9,\n             -12,  -3,   8,  10, 13,   3,  -7, -15,\n             -14, -18,  -7,  -1,  4,  -9, -15, -27,\n             -23,  -9, -23,  -5, -9, -16,  -5, -17,)\nROOK_MG = (32,  42,  32,  51, 63,  9,  31,  43,\n           27,  32,  58,  62, 80, 67,  26,  44,",
        "detail": "heuristic",
        "documentation": {}
    },
    {
        "label": "ROOK_MG",
        "kind": 5,
        "importPath": "heuristic",
        "description": "heuristic",
        "peekOfCode": "ROOK_MG = (32,  42,  32,  51, 63,  9,  31,  43,\n           27,  32,  58,  62, 80, 67,  26,  44,\n           -5,  19,  26,  36, 17, 45,  61,  16,\n          -24, -11,   7,  26, 24, 35,  -8, -20,\n          -36, -26, -12,  -1,  9, -7,   6, -23,\n          -45, -25, -16, -17,  3,  0,  -5, -33,\n          -44, -16, -20,  -9, -1, 11,  -6, -71,\n          -19, -13,   1,  17, 16,  7, -37, -26,)\nROOK_EG = (13, 10, 18, 15, 12,  12,   8,   5,\n           11, 13, 13, 11, -3,   3,   8,   3,",
        "detail": "heuristic",
        "documentation": {}
    },
    {
        "label": "ROOK_EG",
        "kind": 5,
        "importPath": "heuristic",
        "description": "heuristic",
        "peekOfCode": "ROOK_EG = (13, 10, 18, 15, 12,  12,   8,   5,\n           11, 13, 13, 11, -3,   3,   8,   3,\n            7,  7,  7,  5,  4,  -3,  -5,  -3,\n            4,  3, 13,  1,  2,   1,  -1,   2,\n            3,  5,  8,  4, -5,  -6,  -8, -11,\n           -4,  0, -5, -1, -7, -12,  -8, -16,\n           -6, -6,  0,  2, -9,  -9, -11,  -3,\n           -9,  2,  3, -1, -5, -13,   4, -20,)\nQUEEN_MG = (-28,   0,  29,  12,  59,  44,  43,  45,\n            -24, -39,  -5,   1, -16,  57,  28,  54,",
        "detail": "heuristic",
        "documentation": {}
    },
    {
        "label": "QUEEN_MG",
        "kind": 5,
        "importPath": "heuristic",
        "description": "heuristic",
        "peekOfCode": "QUEEN_MG = (-28,   0,  29,  12,  59,  44,  43,  45,\n            -24, -39,  -5,   1, -16,  57,  28,  54,\n            -13, -17,   7,   8,  29,  56,  47,  57,\n            -27, -27, -16, -16,  -1,  17,  -2,   1,\n             -9, -26,  -9, -10,  -2,  -4,   3,  -3,\n            -14,   2, -11,  -2,  -5,   2,  14,   5,\n            -35,  -8,  11,   2,   8,  15,  -3,   1,\n             -1, -18,  -9,  10, -15, -25, -31, -50,)\nQUEEN_EG = (-9,  22,  22,  27,  27,  19,  10,  20,\n           -17,  20,  32,  41,  58,  25,  30,   0,",
        "detail": "heuristic",
        "documentation": {}
    },
    {
        "label": "QUEEN_EG",
        "kind": 5,
        "importPath": "heuristic",
        "description": "heuristic",
        "peekOfCode": "QUEEN_EG = (-9,  22,  22,  27,  27,  19,  10,  20,\n           -17,  20,  32,  41,  58,  25,  30,   0,\n           -20,   6,   9,  49,  47,  35,  19,   9,\n             3,  22,  24,  45,  57,  40,  57,  36,\n           -18,  28,  19,  47,  31,  34,  39,  23,\n           -16, -27,  15,   6,   9,  17,  10,   5,\n           -22, -23, -30, -16, -16, -23, -36, -32,\n           -33, -28, -22, -43,  -5, -32, -20, -41,)\nKING_MG = (-65,  23,  16, -15, -56, -34,   2,  13,\n            29,  -1, -20,  -7,  -8,  -4, -38, -29,",
        "detail": "heuristic",
        "documentation": {}
    },
    {
        "label": "KING_MG",
        "kind": 5,
        "importPath": "heuristic",
        "description": "heuristic",
        "peekOfCode": "KING_MG = (-65,  23,  16, -15, -56, -34,   2,  13,\n            29,  -1, -20,  -7,  -8,  -4, -38, -29,\n            -9,  24,   2, -16, -20,   6,  22, -22,\n           -17, -20, -12, -27, -30, -25, -14, -36,\n           -49,  -1, -27, -39, -46, -44, -33, -51,\n           -14, -14, -22, -46, -44, -30, -15, -27,\n             1,   7,  -8, -64, -43, -16,   9,   8,\n           -15,  36,  12, -54,   8, -28,  24,  14,)\nKING_EG = (-74, -35, -18, -18, -11,  15,   4, -17,\n           -12,  17,  14,  17,  17,  38,  23,  11,",
        "detail": "heuristic",
        "documentation": {}
    },
    {
        "label": "KING_EG",
        "kind": 5,
        "importPath": "heuristic",
        "description": "heuristic",
        "peekOfCode": "KING_EG = (-74, -35, -18, -18, -11,  15,   4, -17,\n           -12,  17,  14,  17,  17,  38,  23,  11,\n            10,  17,  23,  15,  20,  45,  44,  13,\n            -8,  22,  24,  27,  26,  33,  26,   3,\n           -18,  -4,  21,  24,  27,  23,   9, -11,\n           -19,  -3,  11,  21,  23,  16,   7,  -9,\n           -27, -11,   4,  13,  14,   4,  -5, -17,\n           -53, -34, -21, -11, -28, -14, -24, -43,)\nMG_PESTO = {\n    chess.PAWN: PAWN_MG,",
        "detail": "heuristic",
        "documentation": {}
    },
    {
        "label": "MG_PESTO",
        "kind": 5,
        "importPath": "heuristic",
        "description": "heuristic",
        "peekOfCode": "MG_PESTO = {\n    chess.PAWN: PAWN_MG,\n    chess.KNIGHT: KNIGHT_MG,\n    chess.BISHOP: BISHOP_MG,\n    chess.ROOK: ROOK_MG,\n    chess.QUEEN: QUEEN_MG,\n    chess.KING: KING_MG,\n}\nEG_PESTO = {\n    chess.PAWN: PAWN_EG,",
        "detail": "heuristic",
        "documentation": {}
    },
    {
        "label": "EG_PESTO",
        "kind": 5,
        "importPath": "heuristic",
        "description": "heuristic",
        "peekOfCode": "EG_PESTO = {\n    chess.PAWN: PAWN_EG,\n    chess.KNIGHT: KNIGHT_EG,\n    chess.BISHOP: BISHOP_EG,\n    chess.ROOK: ROOK_EG,\n    chess.QUEEN: QUEEN_EG,\n    chess.KING: KING_EG,\n}\ndef score(board: chess.Board):\n    if board.is_game_over():",
        "detail": "heuristic",
        "documentation": {}
    },
    {
        "label": "PHASE_VALUES",
        "kind": 5,
        "importPath": "heuristic",
        "description": "heuristic",
        "peekOfCode": "PHASE_VALUES = {\n    chess.PAWN: 0,\n    chess.KNIGHT: 1,\n    chess.BISHOP: 1,\n    chess.ROOK: 2,\n    chess.QUEEN: 4,\n}\nTOTAL_PHASE = (PHASE_VALUES[chess.PAWN] * 16 + PHASE_VALUES[chess.KNIGHT] * 4 + \n               PHASE_VALUES[chess.BISHOP] * 4 + PHASE_VALUES[chess.ROOK] * 4 + PHASE_VALUES[chess.QUEEN] * 2)\ndef get_phase(board: chess.Board):",
        "detail": "heuristic",
        "documentation": {}
    },
    {
        "label": "TOTAL_PHASE",
        "kind": 5,
        "importPath": "heuristic",
        "description": "heuristic",
        "peekOfCode": "TOTAL_PHASE = (PHASE_VALUES[chess.PAWN] * 16 + PHASE_VALUES[chess.KNIGHT] * 4 + \n               PHASE_VALUES[chess.BISHOP] * 4 + PHASE_VALUES[chess.ROOK] * 4 + PHASE_VALUES[chess.QUEEN] * 2)\ndef get_phase(board: chess.Board):\n    phase = TOTAL_PHASE - sum(PHASE_VALUES.get(piece.piece_type, 0) for piece in board.piece_map().values())\n    phase = (phase * 256 + (TOTAL_PHASE / 2)) / TOTAL_PHASE\n    return phase",
        "detail": "heuristic",
        "documentation": {}
    },
    {
        "label": "draw_start_screen",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def draw_start_screen(screen):\n    screen.fill('white')\n    main_start_screen.draw_screen(screen)\n    pygame.display.update()\nwhile True:\n    mx, my = pygame.mouse.get_pos()\n    for event in pygame.event.get(): \n        if event.type == pygame.QUIT:\n            exit()\n        elif event.type == pygame.MOUSEBUTTONDOWN:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "draw",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def draw(screen):\n    screen.fill('white')\n    main_board.draw(screen)\n    pygame.display.update()\nbest_move = -1\nwhile True:\n    mx, my = pygame.mouse.get_pos()\n    for event in pygame.event.get(): \n        if event.type == pygame.QUIT:\n            exit()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "window_size",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "window_size = (800, 600)\nboard_size = (600, 600)\nteam = [-1, -1]\n# start screen\nscreen = pygame.display.set_mode(window_size)\nmain_start_screen = start_screen(window_size)\ndef draw_start_screen(screen):\n    screen.fill('white')\n    main_start_screen.draw_screen(screen)\n    pygame.display.update()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "board_size",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "board_size = (600, 600)\nteam = [-1, -1]\n# start screen\nscreen = pygame.display.set_mode(window_size)\nmain_start_screen = start_screen(window_size)\ndef draw_start_screen(screen):\n    screen.fill('white')\n    main_start_screen.draw_screen(screen)\n    pygame.display.update()\nwhile True:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "team",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "team = [-1, -1]\n# start screen\nscreen = pygame.display.set_mode(window_size)\nmain_start_screen = start_screen(window_size)\ndef draw_start_screen(screen):\n    screen.fill('white')\n    main_start_screen.draw_screen(screen)\n    pygame.display.update()\nwhile True:\n    mx, my = pygame.mouse.get_pos()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "screen = pygame.display.set_mode(window_size)\nmain_start_screen = start_screen(window_size)\ndef draw_start_screen(screen):\n    screen.fill('white')\n    main_start_screen.draw_screen(screen)\n    pygame.display.update()\nwhile True:\n    mx, my = pygame.mouse.get_pos()\n    for event in pygame.event.get(): \n        if event.type == pygame.QUIT:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "main_start_screen",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "main_start_screen = start_screen(window_size)\ndef draw_start_screen(screen):\n    screen.fill('white')\n    main_start_screen.draw_screen(screen)\n    pygame.display.update()\nwhile True:\n    mx, my = pygame.mouse.get_pos()\n    for event in pygame.event.get(): \n        if event.type == pygame.QUIT:\n            exit()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "main_board",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "main_board = board(board_size[0], board_size[1], team)\nprint(main_board)\ndef draw(screen):\n    screen.fill('white')\n    main_board.draw(screen)\n    pygame.display.update()\nbest_move = -1\nwhile True:\n    mx, my = pygame.mouse.get_pos()\n    for event in pygame.event.get(): ",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "best_move",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "best_move = -1\nwhile True:\n    mx, my = pygame.mouse.get_pos()\n    for event in pygame.event.get(): \n        if event.type == pygame.QUIT:\n            exit()\n        elif event.type == pygame.MOUSEBUTTONDOWN:\n            if event.button == 1:\n                if main_board.player[main_board.turn]:\n                    main_board.player_click(mx, my, screen)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "start_screen",
        "kind": 6,
        "importPath": "start_window",
        "description": "start_window",
        "peekOfCode": "class start_screen:\n    def __init__(self, window_size):\n        self.max_width, self.max_height = window_size\n        self.font = pygame.font.SysFont('Arial', 25)\n        self.buttons = []\n        self.mode = [(1, 1), (0, 0), (1, 0), (0, 1)]\n    def draw_screen(self, screen):\n        self.addText(screen, (self.max_width // 2, self.max_height // 3), \"Chess game\")\n        self.addText(screen, (self.max_width // 4, (self.max_height * 3) // 5), \"Player vs. Player\")\n        self.addText(screen, (self.max_width // 2, (self.max_height * 3) // 5), \"Player vs. Bot\")",
        "detail": "start_window",
        "documentation": {}
    }
]